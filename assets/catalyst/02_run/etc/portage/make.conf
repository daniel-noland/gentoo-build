# Disable sandbox for docker build (it is already sandboxed anyway and the second sandbox attempt fails)
FEATURES="${FEATURES} -ipc-sandbox"
FEATURES="${FEATURES} -network-sandbox"
FEATURES="${FEATURES} -pid-sandbox"
FEATURES="${FEATURES} -sandbox"
FEATURES="${FEATURES} -usersandbox"

# We don't need to spend time building and running tests.  They frequently fail in unprivileged container builds anyway.
FEATURES="${FEATURES} -test"

BINPKG_COMPRESS="zstd"

PORTDIR="/var/db/repos/gentoo"
DISTDIR="/var/cache/distfiles"
PKGDIR="/var/cache/binpkgs"

LC_MESSAGES=C

# use LLVM-provided binutils
ADDR2LINE="llvm-addr2line"
AR="llvm-ar"
AS="llvm-as"
CC="clang"
CXX="clang++"
LD="ld.lld"
NM="llvm-nm"
OBJCOPY="llvm-objcopy"
OBJDUMP="llvm-objdump"
RANLIB="llvm-ranlib"
READELF="llvm-readelf"
STRINGS="llvm-strings"
STRIP="llvm-strip"

# Aggressively optimized compile settings (no I am not convinced it will be super fast; yes, this is an experiment!)
_HARDENING_FLAGS="-fPIC -fstack-protector-strong -D_FORTIFY_SOURCE=2"
_COMMON_FLAGS="-O3 -march=native -pipe ${_HARDENING_FLAGS} -flto=thin"
CFLAGS="${CFLAGS} ${_COMMON_FLAGS}"
CXXFLAGS="${CXXFLAGS} ${_COMMON_FLAGS}"
FCFLAGS="${FCFLAGS} ${_COMMON_FLAGS}"
FFLAGS="${FFLAGS} ${_COMMON_FLAGS}"

LDFLAGS="-Wl,-O2 -Wl,--as-needed -Wl,-z,relro,-z,now -pie -fuse-ld=lld -unwindlib=libunwind -Wl,--thinlto-jobs=64"

# Nobody logs in to this phase so building brail support, X, command completion, and so on seems like a waste
_GENERAL_USE="${_GENERAL_USE} -X"
_GENERAL_USE="${_GENERAL_USE} -accessibility"
_GENERAL_USE="${_GENERAL_USE} -bash-completion"
_GENERAL_USE="${_GENERAL_USE} -bluetooth"
_GENERAL_USE="${_GENERAL_USE} -branding"
_GENERAL_USE="${_GENERAL_USE} -debug"
_GENERAL_USE="${_GENERAL_USE} -doc"
_GENERAL_USE="${_GENERAL_USE} -examples"
_GENERAL_USE="${_GENERAL_USE} -gnome"
_GENERAL_USE="${_GENERAL_USE} -gtk2"
_GENERAL_USE="${_GENERAL_USE} -gtk3"
_GENERAL_USE="${_GENERAL_USE} -gui"
_GENERAL_USE="${_GENERAL_USE} -man"
_GENERAL_USE="${_GENERAL_USE} -ncurses"
_GENERAL_USE="${_GENERAL_USE} -qt5"
_GENERAL_USE="${_GENERAL_USE} -sqlite"
_GENERAL_USE="${_GENERAL_USE} -systemd"
_GENERAL_USE="${_GENERAL_USE} -test"

# Turn off iso to prevent catalyst from pulling in a bunch of stuff we don't need or want here.
_GENERAL_USE="${_GENERAL_USE} -iso"

# The bootstrap phase has nothing to do with portability and I only care about this proc,
# so we can skip targets/ABIs which don't apply.
ABI_X86="64"
_GENERAL_USE="${_GENERAL_USE} -abi_x86_32"
_GENERAL_USE="${_GENERAL_USE} -abi_x86_x32"
_GENERAL_USE="${_GENERAL_USE} abi_x86_64"

_GENERAL_USE="${_GENERAL_USE} -binutils-plugin" # trying to avoid gcc stuff in this build
_GENERAL_USE="${_GENERAL_USE} -fortran" # fortran support does not apply here.  Should maybe mask this use flag.
_GENERAL_USE="${_GENERAL_USE} -gold" # gold is basically a dead project as I understand things.  We want to use lld anyway.
_GENERAL_USE="${_GENERAL_USE} -z3" # no need in bootstrap

LLVM_TARGETS="X86"

_GENERAL_USE="${_GENERAL_USE} -llvm_targets_AArch64"
_GENERAL_USE="${_GENERAL_USE} -llvm_targets_AMDGPU"
_GENERAL_USE="${_GENERAL_USE} -llvm_targets_ARM"
_GENERAL_USE="${_GENERAL_USE} -llvm_targets_AVR"
_GENERAL_USE="${_GENERAL_USE} -llvm_targets_BPF"
_GENERAL_USE="${_GENERAL_USE} -llvm_targets_Hexagon"
_GENERAL_USE="${_GENERAL_USE} -llvm_targets_Lanai"
_GENERAL_USE="${_GENERAL_USE} -llvm_targets_MSP430"
_GENERAL_USE="${_GENERAL_USE} -llvm_targets_Mips"
_GENERAL_USE="${_GENERAL_USE} -llvm_targets_NVPTX"
_GENERAL_USE="${_GENERAL_USE} -llvm_targets_PowerPC"
_GENERAL_USE="${_GENERAL_USE} -llvm_targets_RISCV"
_GENERAL_USE="${_GENERAL_USE} -llvm_targets_Sparc"
_GENERAL_USE="${_GENERAL_USE} -llvm_targets_SystemZ"
_GENERAL_USE="${_GENERAL_USE} -llvm_targets_VE"
_GENERAL_USE="${_GENERAL_USE} -llvm_targets_WebAssembly"
_GENERAL_USE="${_GENERAL_USE} -llvm_targets_XCore"

# Turn on our desired LLVM toolchain features
_GENERAL_USE="${_GENERAL_USE} clang"
_GENERAL_USE="${_GENERAL_USE} compiler-rt"
_GENERAL_USE="${_GENERAL_USE} curl_ssl_openssl"
_GENERAL_USE="${_GENERAL_USE} default-compiler-rt"
_GENERAL_USE="${_GENERAL_USE} default-libcxx"
_GENERAL_USE="${_GENERAL_USE} default-lld"
_GENERAL_USE="${_GENERAL_USE} exegesis"
_GENERAL_USE="${_GENERAL_USE} libcxx"
_GENERAL_USE="${_GENERAL_USE} libcxxabi"
_GENERAL_USE="${_GENERAL_USE} libffi"
_GENERAL_USE="${_GENERAL_USE} libunwind"
_GENERAL_USE="${_GENERAL_USE} llvm-libunwind"
_GENERAL_USE="${_GENERAL_USE} lto"
_GENERAL_USE="${_GENERAL_USE} runtime"
_GENERAL_USE="${_GENERAL_USE} sanitize"
_GENERAL_USE="${_GENERAL_USE} ssl"
#_GENERAL_USE="${_GENERAL_USE} static"
_GENERAL_USE="${_GENERAL_USE} static-analyzer"
_GENERAL_USE="${_GENERAL_USE} static-libs"
_GENERAL_USE="${_GENERAL_USE} static-pic"
_GENERAL_USE="${_GENERAL_USE} xar"

USE="${USE} ${_GENERAL_USE}"
BOOTSTRAP_USE="${BOOTSTRAP_USE} ${_GENERAL_USE}"
# Can't use static during bootstrap
BOOTSTRAP_USE="${BOOTSTRAP_USE} -static"
BOOTSTRAP_USE="${BOOTSTRAP_USE} -static-libs"
BOOTSTRAP_USE="${BOOTSTRAP_USE} -static-pic"

# Not really helpful during bootstrap
BOOTSTRAP_USE="${BOOTSTRAP_USE} -static-analyzer"

# Not really helpful during bootstrap
BOOTSTRAP_USE="${BOOTSTRAP_USE} -sanitize"

# Not available or useful during bootstrap
BOOTSTRAP_USE="${BOOTSTRAP_USE} -binutils-plugin"

# Not useful during bootstrap
BOOTSTRAP_USE="${BOOTSTRAP_USE} -lto"
