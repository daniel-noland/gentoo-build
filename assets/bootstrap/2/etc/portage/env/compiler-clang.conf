ADDR2LINE="llvm-addr2line"
AR="llvm-ar"
AS="llvm-as"
CC="clang"
CXX="clang++"
LD="ld.lld"
LDFLAGS="${LDFLAGS} -fuse-ld=lld -rtlib=compiler-rt -unwindlib=libunwind -Wl,--as-needed"
NM="llvm-nm"
OBJCOPY="llvm-objcopy"
OBJDUMP="llvm-objdump"
RANLIB="llvm-ranlib"
READELF="llvm-readelf"
STRINGS="llvm-strings"
STRIP="llvm-strip"

_HARDENING_COMPILER_FLAGS="-D_FORTIFY_SOURCE=2"

# enable hardening by default, cf. gcc[pie,ssp]
CFLAGS="${CFLAGS} ${_HARDENING_COMPILER_FLAGS}"
CXXFLAGS="${CXXFLAGS} ${_HARDENING_COMPILER_FLAGS}"
LDFLAGS="${LDFLAGS} ${_HARDENING_COMPILER_FLAGS}"

# sys-devel/clang, sys-devel/clang-runtime, sys-libs/llvm-libunwind, sys-libs/libcxx, sys-libs/libcxxabi
USE="${USE} compiler-rt clang libunwind"

# sys-devel/clang
USE="${USE} default-compiler-rt default-lld default-libcxx llvm-libunwind"

# sys-devel/clang-runtime
USE="${USE} libcxx -sanitize"

# sys-libs/libcxxabi
USE="${USE} libcxxabi"

# llvm & clang: explicitly disable all extra targets, otherwise linking stage2 fails
USE="${USE} -llvm_targets_AArch64"
USE="${USE} -llvm_targets_AMDGPU"
USE="${USE} -llvm_targets_ARM"
USE="${USE} -llvm_targets_AVR"
USE="${USE} -llvm_targets_BPF"
USE="${USE} -llvm_targets_Hexagon"
USE="${USE} -llvm_targets_Lanai"
USE="${USE} -llvm_targets_Mips"
USE="${USE} -llvm_targets_MSP430"
USE="${USE} -llvm_targets_NVPTX"
USE="${USE} -llvm_targets_PowerPC"
USE="${USE} -llvm_targets_RISCV"
USE="${USE} -llvm_targets_Sparc"
USE="${USE} -llvm_targets_SystemZ"
USE="${USE} -llvm_targets_VE"
USE="${USE} -llvm_targets_WebAssembly"
USE="${USE} -llvm_targets_XCore"
